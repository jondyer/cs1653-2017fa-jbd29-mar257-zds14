public final int GCM_IV = 12;    //byte-length of IV
public final int GCM_TAG = 128;     //bit-length of verification tag

Security.addProvider(new BouncyCastleProvider());


/*
 * Given plaintext as `plain`, the session key as `agreedKey`, this encrypts
 */

// create a secure random number generator
SecureRandom r = SecureRandom.getInstance();

// get cipher object for our AES
Cipher symCipher = Cipher.getInstance("AES/GCM/NoPadding", "BC");

// generate the IV
final byte[] iv = new byte[GCM_IV];
r.nextBytes(iv);
GCMParameterSpec specs = new GCMParameterSpec(GCM_TAG, iv);

// initialize the cipher object
symCipher.init(Cipher.ENCRYPT_MODE, agreedKey, specs);


// now encrypt
byte[] cipher = doFinal(plain)




/*
 * Given ciphertext as cipherText, nonce as iv, and session key as agreedKey, this decrypts
 */
// first get the same specs as above


symCipher.init(DECRYPT_MODE, agreedKey, specs);

byte[] plain = symCipher.doFinal(cipherText);
